# -*- coding: utf-8 -*-
"""bootcamp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WfqQLGlD60JYrM553B4fbWSEVXXIPc7Y

# 1. Carga de datos y exploración inicial
"""

import pandas as pd
# cargar archivo con errores
df=pd.read_csv('/home/ban/Documents/ejemplo_python/energy_transition_dirty.csv')
df.head() #trae 5 primeros registros del documento

"""# 2. Limpieza de datos"""

import numpy as np
# eliminar espacios en blanco que puedan existir / .str es string
df.columns.str.strip()
df['Country']=df['Country'].str.strip()
df.head()

# corregir columna 'Year' a tipo válido /
df['Year'] = pd.to_numeric(df['Year'], errors='coerce') #la función errors transforma valores que no cumplen (en este caso un nùmero) a valores nulos (NaN)
df.head()

# convertir columnas númericas / los [] me sirven para hacer lista
num_cols=['Total_Energy_GWh',
          'Renewable_Energy_GWh',
          'Renewable_Share_percent',
          'CO2_Emissions_kT',
          'Investment_USD_m'
          ]
for col in num_cols:
  df[col]=(
      df[col]
      .astype(str)
      .str.replace(',','.',regex=False)
      .str.extract(r"(\d+\.?d*)")
  )
  df[col]=pd.to_numeric(df[col],errors='coerce')
df.head()

# eliminar filas con valores faltantes (los NaN)
df_clean=df.dropna(subset=[
          'Year',
          'Total_Energy_GWh',
          'Renewable_Energy_GWh',
          'Renewable_Share_percent'
])
# verificar que todo este númerico y sin valores negativos
df_clean=df_clean[df_clean['CO2_Emissions_kT']>=0]
df_clean=df_clean[df_clean['Investment_USD_m']>=0]
df_clean.reset_index(drop=True,inplace=True) #para subir columnas debido a q se quitan dos en este caso
df_clean.head()

"""# 3. Guardar dataset limpio"""

df_clean.to_csv('/home/ban/Documents/ejemplo_python/energy_transition_clean.csv',index=False)

"""# 4. Visualización de datos

1. Participación de energía renovable por país
"""

import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(10,6))
sns.barplot(
    data=df_clean,
    x='Renewable_Share_percent',
    y='Country',
    estimator='mean',
    errorbar=None,
    palette='viridis'
)
plt.xlabel('Participación (%)')
plt.ylabel('País')
plt.title('Participación de energía renovable por país')
plt.show()

"""2. Evolución del consumo total de energía por país.
  El hue es para color y el make para el símbolo circulo en la gráfica. Acá ponemos lineplot
"""

plt.figure(figsize=(12,6))
sns.lineplot(
    data=df_clean,
    x='Year',
    y='Total_Energy_GWh',
    hue='Country',
    marker='o'
)
plt.ylabel('GWh')
plt.grid(True)
plt.title('Consumo total de energía por país a lo largo del tiempo')
plt.show()

"""3. Gráfica circular de inversión por país"""

df_gruped=df_clean.groupby('Country')['Investment_USD_m'].sum().sort_values(ascending=False)
plt.figure(figsize=(8,8))
plt.pie(df_gruped,labels=df_gruped.index,autopct='%1.1f%%',startangle=140)
plt.title('Inversión po país')
plt.show()

"""4. Relación entre inversión y reducción de CO"""

plt.figure(figsize=(10,6))
sns.scatterplot(
    data=df_clean,
    x='Investment_USD_m',
    y='CO2_Emissions_kT',
    hue='Country',
    size="Renewable_Share_percent",
    sizes=(20,200),
    alpha=0.7
)
plt.xlabel('Inversión (USD millones)')
plt.ylabel('Emisiones de CO (kT)')
plt.title('Relación entre inversión y reducción de CO')
plt.show()

"""**Python** lo estamos usando para limpieza de datos y exportar a **json** para poder procesar con **javascript**

# 5. Convertir CSV a JSON
"""

df=pd.read_csv('energy_transition_clean.csv')
df.to_json('/home/ban/Documents/ejemplo_python/energy_transition_clean.json', orient='records')